#!/bin/bash
# docker_diagnostic.sh - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã

echo "üè• Medical Monitoring System - Docker Diagnostics"
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container() {
    local container_name=$1
    local status=$(docker-compose ps -q $container_name 2>/dev/null)

    if [ -z "$status" ]; then
        echo -e "${RED}‚ùå $container_name: –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi

    local running=$(docker inspect --format="{{.State.Running}}" $(docker-compose ps -q $container_name) 2>/dev/null)
    local health=$(docker inspect --format="{{.State.Health.Status}}" $(docker-compose ps -q $container_name) 2>/dev/null)

    if [ "$running" = "true" ]; then
        if [ "$health" = "healthy" ] || [ "$health" = "" ]; then
            echo -e "${GREEN}‚úÖ $container_name: —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $container_name: —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ healthy ($health)${NC}"
            return 2
        fi
    else
        echo -e "${RED}‚ùå $container_name: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service=$2

    if nc -z localhost $port 2>/dev/null; then
        echo -e "${GREEN}‚úÖ $service (port $port): –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $service (port $port): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
echo ""

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
containers=("postgres" "redis" "backend" "grafana" "airflow-webserver" "airflow-scheduler" "postgres-airflow")
failed_containers=()

for container in "${containers[@]}"; do
    if ! check_container "$container"; then
        failed_containers+=("$container")
    fi
done

echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
ports=(
    "5432:PostgreSQL"
    "6379:Redis"
    "8045:Backend API"
    "3005:Grafana"
    "8080:Airflow"
)

failed_ports=()

for port_service in "${ports[@]}"; do
    IFS=':' read -r port service <<< "$port_service"
    if ! check_port "$port" "$service"; then
        failed_ports+=("$port:$service")
    fi
done

echo ""
echo "üìä –°–≤–æ–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo "====================="

if [ ${#failed_containers[@]} -eq 0 ] && [ ${#failed_ports[@]} -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!${NC}"
    echo ""
    echo "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ‚Ä¢ Backend API: http://localhost:8045/api/v1/docs"
    echo "  ‚Ä¢ Grafana: http://localhost:3005 (admin/admin)"
    echo "  ‚Ä¢ Airflow: http://localhost:8080 (admin/admin)"
    echo ""
    echo "üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö:"
    echo "  python test_data_generator.py"
else
    echo -e "${RED}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:${NC}"

    if [ ${#failed_containers[@]} -gt 0 ]; then
        echo ""
        echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
        for container in "${failed_containers[@]}"; do
            echo "  ‚Ä¢ $container"
        done
    fi

    if [ ${#failed_ports[@]} -gt 0 ]; then
        echo ""
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:${NC}"
        for port_service in "${failed_ports[@]}"; do
            IFS=':' read -r port service <<< "$port_service"
            echo "  ‚Ä¢ $service (port $port)"
        done
    fi

    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    echo ""

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [[ " ${failed_containers[@]} " =~ " postgres " ]]; then
        echo "üìÇ PostgreSQL –ø—Ä–æ–±–ª–µ–º—ã:"
        echo "  docker-compose logs postgres"
        echo "  docker-compose restart postgres"
        echo ""
    fi

    if [[ " ${failed_containers[@]} " =~ " backend " ]]; then
        echo "üîß Backend API –ø—Ä–æ–±–ª–µ–º—ã:"
        echo "  docker-compose logs backend"
        echo "  docker-compose restart backend"
        echo ""
    fi

    if [[ " ${failed_containers[@]} " =~ " redis " ]]; then
        echo "üíæ Redis –ø—Ä–æ–±–ª–µ–º—ã:"
        echo "  docker-compose logs redis"
        echo "  docker-compose restart redis"
        echo ""
    fi

    echo "üîÑ –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  docker-compose down && docker-compose up -d"
    echo ""
    echo "  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  docker-compose logs -f"
    echo ""
    echo "  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
    echo "  docker-compose ps"
fi

echo ""
echo "üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
echo ""

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ Docker:"
docker system df 2>/dev/null | head -5

echo ""
echo "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
echo "=============================================="
docker-compose logs --tail=10 backend 2>/dev/null | tail -10

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "========================="
docker-compose ps

echo ""
echo "üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
echo ""
echo "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose.yml"
echo "  2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç—ã –Ω–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"
echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"
echo "  4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose down -v && docker-compose up -d"