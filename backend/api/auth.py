from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from pydantic import BaseModel, EmailStr, validator
import hashlib
import secrets
import os
from jose import JWTError, jwt
from typing import Optional
import logging

from database import get_db
from models import User, UserProfile, UserRole

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger = logging.getLogger(__name__)

router = APIRouter()
security = HTTPBearer()

# JWT Config
SECRET_KEY = os.getenv("SECRET_KEY", "medical_secret_key_2024")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
REFRESH_TOKEN_EXPIRE_DAYS = 7

# Password hashing config
SALT = os.getenv("SALT", "your-salt-here")


class LoginRequest(BaseModel):
    email: EmailStr
    password: str


class RegisterRequest(BaseModel):
    email: EmailStr
    password: str
    first_name: str
    last_name: str
    phone: str
    birth_date: Optional[str] = None  # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
    gender: str = "other"
    patronymic: Optional[str] = None
    address: Optional[str] = None

    @validator('password')
    def validate_password(cls, v):
        if len(v) < 6:
            raise ValueError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
        return v

    @validator('gender')
    def validate_gender(cls, v):
        if v not in ['male', 'female', 'other']:
            return 'other'
        return v


class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str


class TokenData(BaseModel):
    user_id: Optional[int] = None


def hash_password(password: str) -> str:
    return hashlib.pbkdf2_hmac('sha256', (password + SALT).encode(), SALT.encode(), 100000).hex()


def verify_password(password: str, hashed: str) -> bool:
    return hash_password(password) == hashed


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)

    to_encode.update({"exp": expire, "type": "access"})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def create_refresh_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({"exp": expire, "type": "refresh"})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def verify_token(token: str, token_type: str = "access"):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: int = payload.get("sub")
        token_type_check: str = payload.get("type")

        if user_id is None or token_type_check != token_type:
            return None

        return TokenData(user_id=user_id)
    except JWTError:
        return None


def get_current_user(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        db: Session = Depends(get_db)
) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Authorization header
        token = credentials.credentials

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        token_data = verify_token(token, "access")
        if token_data is None or token_data.user_id is None:
            raise credentials_exception

    except Exception:
        raise credentials_exception

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user = db.query(User).filter(
        User.id == token_data.user_id,
        User.is_active == True
    ).first()

    if user is None:
        raise credentials_exception

    return user


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–∞–µ–º optional –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
def get_current_user_optional(
        db: Session = Depends(get_db),
        credentials: Optional[HTTPAuthorizationCredentials] = Depends(HTTPBearer(auto_error=False))
) -> Optional[User]:
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π"""
    if not credentials:
        return None

    try:
        token = credentials.credentials
        token_data = verify_token(token, "access")
        if token_data is None or token_data.user_id is None:
            return None

        user = db.query(User).filter(
            User.id == token_data.user_id,
            User.is_active == True
        ).first()

        return user
    except Exception:
        return None


@router.post("/login", response_model=Token)
async def login(request: LoginRequest, db: Session = Depends(get_db)):
    logger.info(f"üîê Login attempt for email: {request.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(
        User.email == request.email.lower()
    ).first()

    if not user or not verify_password(request.password, user.password_hash):
        logger.warning(f"‚ùå Login failed for email: {request.email} - invalid credentials")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )

    if not user.is_active:
        logger.warning(f"‚ùå Login failed for email: {request.email} - account inactive")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.last_login = datetime.now()
    db.commit()

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(data={"sub": str(user.id)})
    refresh_token = create_refresh_token(data={"sub": str(user.id)})

    logger.info(f"‚úÖ Login successful for user ID: {user.id}")

    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer"
    }


@router.post("/refresh", response_model=Token)
async def refresh_token(
        credentials: HTTPAuthorizationCredentials = Depends(security),
        db: Session = Depends(get_db)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate refresh token",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
        token_data = verify_token(credentials.credentials, "refresh")
        if token_data is None or token_data.user_id is None:
            raise credentials_exception

    except Exception:
        raise credentials_exception

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
    user = db.query(User).filter(
        User.id == token_data.user_id,
        User.is_active == True
    ).first()

    if user is None:
        raise credentials_exception

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(data={"sub": str(user.id)})
    refresh_token = create_refresh_token(data={"sub": str(user.id)})

    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer"
    }


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
def parse_birth_date(date_string: Optional[str]) -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not date_string:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1990-01-01)
        return datetime(1990, 1, 1)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        return datetime.strptime(date_string, "%Y-%m-%d")
    except ValueError:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            return datetime.strptime(date_string, "%d.%m.%Y")
        except ValueError:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM/YYYY
                return datetime.strptime(date_string, "%d/%m/%Y")
            except ValueError:
                logger.warning(f"‚ö†Ô∏è Invalid birth date format: {date_string}")
                # –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return datetime(1990, 1, 1)


@router.post("/register")
async def register(request: RegisterRequest, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    logger.info(f"üìù Registration attempt for email: {request.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing = db.query(User).filter(
        User.email == request.email.lower()
    ).first()

    if existing:
        logger.warning(f"‚ùå Registration failed - user already exists: {request.email}")
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )

    try:
        logger.info(f"üîß Creating user record for: {request.email}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=request.email.split('@')[0],
            email=request.email.lower(),
            password_hash=hash_password(request.password),
            role=UserRole.PATIENT,
            is_active=True,
            created_at=datetime.utcnow()
        )

        db.add(user)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        logger.info(f"‚úÖ User created with ID: {user.id}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date = parse_birth_date(request.birth_date)
        logger.info(f"üìÖ Birth date parsed: {birth_date}")

        logger.info(f"üîß Creating user profile for user ID: {user.id}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = UserProfile(
            user_id=user.id,
            first_name=request.first_name.strip(),
            last_name=request.last_name.strip(),
            patronymic=request.patronymic.strip() if request.patronymic else None,
            phone_number=request.phone.strip(),
            birth_date=birth_date,
            gender=request.gender,
            address=request.address.strip() if request.address else None
        )

        db.add(profile)
        db.commit()

        logger.info(f"‚úÖ Registration completed successfully for user ID: {user.id}")

        return {
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            "user_id": user.id,
            "email": user.email
        }

    except Exception as e:
        logger.error(f"‚ùå Registration failed for {request.email}: {str(e)}")
        logger.error(f"‚ùå Exception type: {type(e).__name__}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω rollback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        db.rollback()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "UNIQUE constraint failed" in str(e) or "already exists" in str(e):
            raise HTTPException(
                status_code=400,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        elif "NOT NULL constraint failed" in str(e):
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
            )
        else:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
            )


@router.post("/register-and-login", response_model=Token)
async def register_and_login(request: RegisterRequest, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É"""

    logger.info(f"üìùüîê Registration with auto-login attempt for email: {request.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing = db.query(User).filter(
        User.email == request.email.lower()
    ).first()

    if existing:
        logger.warning(f"‚ùå Registration failed - user already exists: {request.email}")
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )

    try:
        logger.info(f"üîß Creating user record for: {request.email}")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=request.email.split('@')[0],
            email=request.email.lower(),
            password_hash=hash_password(request.password),
            role=UserRole.PATIENT,
            is_active=True,
            created_at=datetime.utcnow(),
            last_login=datetime.utcnow()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        )

        db.add(user)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        logger.info(f"‚úÖ User created with ID: {user.id}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date = parse_birth_date(request.birth_date)
        logger.info(f"üìÖ Birth date parsed: {birth_date}")

        logger.info(f"üîß Creating user profile for user ID: {user.id}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = UserProfile(
            user_id=user.id,
            first_name=request.first_name.strip(),
            last_name=request.last_name.strip(),
            patronymic=request.patronymic.strip() if request.patronymic else None,
            phone_number=request.phone.strip(),
            birth_date=birth_date,
            gender=request.gender,
            address=request.address.strip() if request.address else None
        )

        db.add(profile)
        db.commit()

        logger.info(f"‚úÖ Registration completed, creating tokens for user ID: {user.id}")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
        access_token = create_access_token(data={"sub": str(user.id)})
        refresh_token = create_refresh_token(data={"sub": str(user.id)})

        logger.info(f"‚úÖ Registration and login completed successfully for user ID: {user.id}")

        return {
            "access_token": access_token,
            "refresh_token": refresh_token,
            "token_type": "bearer"
        }

    except Exception as e:
        logger.error(f"‚ùå Registration and login failed for {request.email}: {str(e)}")
        logger.error(f"‚ùå Exception type: {type(e).__name__}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω rollback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        db.rollback()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "UNIQUE constraint failed" in str(e) or "already exists" in str(e):
            raise HTTPException(
                status_code=400,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        elif "NOT NULL constraint failed" in str(e):
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
            )
        else:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"
            )


@router.get("/me")
async def get_me(current_user: User = Depends(get_current_user)):
    logger.info(f"üë§ User info requested for user ID: {current_user.id}")

    try:
        return {
            "id": current_user.id,
            "email": current_user.email,
            "username": current_user.username,
            "role": current_user.role.value,
            "full_name": f"{current_user.profile.first_name} {current_user.profile.last_name}" if current_user.profile else None,
            "first_name": current_user.profile.first_name if current_user.profile else None,
            "last_name": current_user.profile.last_name if current_user.profile else None,
            "phone": current_user.profile.phone_number if current_user.profile else None,
            "is_active": current_user.is_active,
            "created_at": current_user.created_at.isoformat() if current_user.created_at else None,
            "last_login": current_user.last_login.isoformat() if current_user.last_login else None
        }
    except Exception as e:
        logger.error(f"‚ùå Error getting user info for user ID {current_user.id}: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )


@router.post("/logout")
async def logout(current_user: User = Depends(get_current_user)):
    """
    –í —Å–ª—É—á–∞–µ —Å JWT –ª–æ–≥–∞—É—Ç –æ–±—ã—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ storage. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ blacklist —Ç–æ–∫–µ–Ω–æ–≤,
    –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö.
    """
    logger.info(f"üëã Logout for user ID: {current_user.id}")
    return {"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}


@router.get("/verify")
async def verify_token_endpoint(current_user: User = Depends(get_current_user)):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
    return {"valid": True, "user_id": current_user.id}


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint
@router.get("/debug/user-count")
async def debug_user_count(db: Session = Depends(get_db)):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –£–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
    """
    try:
        user_count = db.query(User).count()
        profile_count = db.query(UserProfile).count()

        logger.info(f"üîç Debug: Users in database: {user_count}, Profiles: {profile_count}")

        return {
            "total_users": user_count,
            "total_profiles": profile_count,
            "users_with_profiles": profile_count  # –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
    except Exception as e:
        logger.error(f"‚ùå Debug user count error: {e}")
        return {"error": str(e)}