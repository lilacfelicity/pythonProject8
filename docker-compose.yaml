version: '3.8'

networks:
  medical_network:
    driver: bridge

volumes:
  postgres_data:
  postgres_airflow_data:
  redis_data:
  grafana_data:
  airflow_dags:
  airflow_logs:
  airflow_plugins:

services:
  # Nginx reverse proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - grafana
#      - airflow-webserver
    restart: unless-stopped
    networks:
      - medical_network


  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-medical_password}
      POSTGRES_USER: ${DB_USER:-medical_user}
      POSTGRES_DB: ${DB_NAME:-medical_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-medical_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - medical_network


  redis:
    image: redis:7-alpine
    container_name: redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - medical_network


  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical_backend
    expose:
      - "8045"
    environment:
      - DB_USER=${DB_USER:-medical_user}
      - DB_PASSWORD=${DB_PASSWORD:-medical_password}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-medical_db}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-medical_secret_key_2024}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:8045/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - medical_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medical_frontend
    environment:
      - VITE_API_URL=http://localhost
      - VITE_WS_URL=ws://localhost/ws
      - VITE_GRAFANA_URL=http://localhost/grafana
    expose:
      - "3000"
    volumes:
      # Маунтим исходники для hot reload
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.js:/app/vite.config.js
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./.env:/app/.env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - medical_network

  iot-simulator:
    build:
      context: ./iot-simulator
      dockerfile: Dockerfile
    container_name: iot_simulator
    volumes:
      # Маунтим исходники для hot reload
      - ./iot-simulator/simulator.py:/app/simulator.py
    environment:
      - API_URL=http://nginx/api
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - medical_network



  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    expose:
      - "3001"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_HTTP_PORT=3001
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=${DB_NAME:-medical_db}
      - GF_DATABASE_USER=${DB_USER:-medical_user}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD:-medical_password}
      # Additional iframe-specific settings
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_VIEWERS_CAN_EDIT=true
      # Отключаем все ограничения для полного доступа
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_LOGIN_HINT=
      - GF_USERS_PASSWORD_HINT=
      # Отключаем телеметрию и метрики для избежания 404 ошибок
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_METRICS_ENABLED=false
      # Настройки Live features - ОТКЛЮЧАЕМ для простоты
      - GF_LIVE_ENABLED=false
      # Дополнительные разрешения для дашбордов
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - medical_network
